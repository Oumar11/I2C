
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d9d  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000837  00000000  00000000  00001129  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b79  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000013c  00000000  00000000  000024dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006188  00000000  00000000  00002618  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ec  00000000  00000000  000087a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00008c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000003a3  00000000  00000000  00008d0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	b1 d0       	rcall	.+354    	; 0x1c4 <main>
  62:	da c0       	rjmp	.+436    	; 0x218 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <i2c_read>:
	TWBR = 0x47;
	TWCR = 0x04; // enables the module via TWEN .
}
uint8_t i2c_read (uint8_t x)
{
	if (x == 0 )							// if x = 1 .. we're reading only 1 byte
  66:	81 11       	cpse	r24, r1
  68:	03 c0       	rjmp	.+6      	; 0x70 <i2c_read+0xa>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);	// if x = 0 .. we 're reading more than one byte
  6a:	84 ec       	ldi	r24, 0xC4	; 196
  6c:	86 bf       	out	0x36, r24	; 54
  6e:	02 c0       	rjmp	.+4      	; 0x74 <i2c_read+0xe>
	else
	TWCR = (1<<TWINT)|(1<<TWEN);  // no ack is sent here.
  70:	84 e8       	ldi	r24, 0x84	; 132
  72:	86 bf       	out	0x36, r24	; 54
	while (((TWCR) & (1<<TWINT)) == 0);
  74:	06 b6       	in	r0, 0x36	; 54
  76:	07 fe       	sbrs	r0, 7
  78:	fd cf       	rjmp	.-6      	; 0x74 <i2c_read+0xe>
	return TWDR;
  7a:	83 b1       	in	r24, 0x03	; 3

}
  7c:	08 95       	ret

0000007e <i2c_listen>:
void i2c_listen ()
{
	while (((TWCR) & (1<<TWINT)) == 0 );
  7e:	06 b6       	in	r0, 0x36	; 54
  80:	07 fe       	sbrs	r0, 7
  82:	fd cf       	rjmp	.-6      	; 0x7e <i2c_listen>
}
  84:	08 95       	ret

00000086 <i2c_S_init>:
void i2c_S_init (uint8_t slaveaddress)
{
	TWCR = 0x04;
  86:	94 e0       	ldi	r25, 0x04	; 4
  88:	96 bf       	out	0x36, r25	; 54
	TWAR = slaveaddress;
  8a:	82 b9       	out	0x02, r24	; 2
	TWCR =(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  8c:	84 ec       	ldi	r24, 0xC4	; 196
  8e:	86 bf       	out	0x36, r24	; 54
  90:	08 95       	ret

00000092 <lcd_cmnd>:



 void lcd_cmnd (unsigned char cmnd)
 {
	 LCD_PRT = (LCD_PRT & 0X0F) | (cmnd & 0XF0); // clearing 4 bits from port.. clearing first 4 bits of cmnd
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	9b bb       	out	0x1b, r25	; 27
	 LCD_PRT &= ~(1<<LCD_RS);
  9e:	d8 98       	cbi	0x1b, 0	; 27
	 LCD_PRT &= ~(1<<LCD_RW);
  a0:	d9 98       	cbi	0x1b, 1	; 27

	 LCD_PRT |= (1<<LCD_EN);
  a2:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	00 00       	nop
	 _delay_us(1);
	 LCD_PRT &= ~(1<<LCD_EN);
  a6:	da 98       	cbi	0x1b, 2	; 27
  a8:	36 e0       	ldi	r19, 0x06	; 6
  aa:	3a 95       	dec	r19
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_cmnd+0x18>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <lcd_cmnd+0x1e>

	 _delay_us(20);

	 LCD_PRT = (LCD_PRT & 0X0F) | (cmnd<<4);
  b0:	2b b3       	in	r18, 0x1b	; 27
  b2:	2f 70       	andi	r18, 0x0F	; 15
  b4:	30 e1       	ldi	r19, 0x10	; 16
  b6:	83 9f       	mul	r24, r19
  b8:	c0 01       	movw	r24, r0
  ba:	11 24       	eor	r1, r1
  bc:	82 2b       	or	r24, r18
  be:	8b bb       	out	0x1b, r24	; 27
	 LCD_PRT |= (1<<LCD_EN);
  c0:	da 9a       	sbi	0x1b, 2	; 27
  c2:	00 00       	nop
	 _delay_us(1);
	 LCD_PRT &= ~(1<<LCD_EN);
  c4:	da 98       	cbi	0x1b, 2	; 27
  c6:	08 95       	ret

000000c8 <lcd_data>:
 }
 void lcd_data (unsigned char data)
 {
	 LCD_PRT = (LCD_PRT & 0X0F) | (data & 0XF0); // clearing 4 bits from port.. clearing first 4 bits of cmnd
  c8:	9b b3       	in	r25, 0x1b	; 27
  ca:	9f 70       	andi	r25, 0x0F	; 15
  cc:	28 2f       	mov	r18, r24
  ce:	20 7f       	andi	r18, 0xF0	; 240
  d0:	92 2b       	or	r25, r18
  d2:	9b bb       	out	0x1b, r25	; 27
	 LCD_PRT |= (1<<LCD_RS);
  d4:	d8 9a       	sbi	0x1b, 0	; 27
	 LCD_PRT &= ~(1<<LCD_RW);
  d6:	d9 98       	cbi	0x1b, 1	; 27

	 LCD_PRT |= (1<<LCD_EN);
  d8:	da 9a       	sbi	0x1b, 2	; 27
  da:	00 00       	nop
	 _delay_us(1);
	 LCD_PRT &= ~(1<<LCD_EN);
  dc:	da 98       	cbi	0x1b, 2	; 27
  de:	36 e0       	ldi	r19, 0x06	; 6
  e0:	3a 95       	dec	r19
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_data+0x18>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_data+0x1e>

	 _delay_us(20);

	 LCD_PRT = (LCD_PRT & 0X0F) | (data<<4);
  e6:	2b b3       	in	r18, 0x1b	; 27
  e8:	2f 70       	andi	r18, 0x0F	; 15
  ea:	30 e1       	ldi	r19, 0x10	; 16
  ec:	83 9f       	mul	r24, r19
  ee:	c0 01       	movw	r24, r0
  f0:	11 24       	eor	r1, r1
  f2:	82 2b       	or	r24, r18
  f4:	8b bb       	out	0x1b, r24	; 27
	 LCD_PRT |= (1<<LCD_EN);
  f6:	da 9a       	sbi	0x1b, 2	; 27
  f8:	00 00       	nop
	 _delay_us(1);
	 LCD_PRT &= ~(1<<LCD_EN);
  fa:	da 98       	cbi	0x1b, 2	; 27
  fc:	08 95       	ret

000000fe <lcd_intit>:
 }
 void lcd_intit ()
 {
	 LCD_DDR  = 0xff;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	8a bb       	out	0x1a, r24	; 26

	 LCD_PRT &= ~(1<<LCD_EN );   //LCD_en = 0
 102:	da 98       	cbi	0x1b, 2	; 27
 104:	83 ef       	ldi	r24, 0xF3	; 243
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_intit+0xa>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_intit+0x10>
 10e:	00 00       	nop
	 _delay_us(2000);			//waiting for stable power
	 lcd_cmnd(0x33);				// 4 bit mode
 110:	83 e3       	ldi	r24, 0x33	; 51
 112:	bf df       	rcall	.-130    	; 0x92 <lcd_cmnd>
 114:	91 e2       	ldi	r25, 0x21	; 33
 116:	9a 95       	dec	r25
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_intit+0x18>
 11a:	00 00       	nop
	 _delay_us(100);				//waiting

	 lcd_cmnd(0x32);				// 4 bit mode
 11c:	82 e3       	ldi	r24, 0x32	; 50
 11e:	b9 df       	rcall	.-142    	; 0x92 <lcd_cmnd>
 120:	81 e2       	ldi	r24, 0x21	; 33
 122:	8a 95       	dec	r24
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_intit+0x24>
	 _delay_us(100);				// waiting

	 lcd_cmnd(0x28);				// 4 bit mode
 126:	00 00       	nop
 128:	88 e2       	ldi	r24, 0x28	; 40
 12a:	b3 df       	rcall	.-154    	; 0x92 <lcd_cmnd>
 12c:	91 e2       	ldi	r25, 0x21	; 33
 12e:	9a 95       	dec	r25
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_intit+0x30>
	 _delay_us(100);				//waiting

	 lcd_cmnd(0x0E);				// display on / cursor on
 132:	00 00       	nop
 134:	8e e0       	ldi	r24, 0x0E	; 14
 136:	ad df       	rcall	.-166    	; 0x92 <lcd_cmnd>
 138:	81 e2       	ldi	r24, 0x21	; 33
 13a:	8a 95       	dec	r24
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_intit+0x3c>
	 _delay_us(100);				// waiting

	 lcd_cmnd(0x01);				//Clear LCD
 13e:	00 00       	nop
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	a7 df       	rcall	.-178    	; 0x92 <lcd_cmnd>
 144:	91 e2       	ldi	r25, 0x21	; 33
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_intit+0x48>
	 _delay_us(100);				//waiting
	 lcd_cmnd(0x06);				//shift cursor right......
 14a:	00 00       	nop
 14c:	86 e0       	ldi	r24, 0x06	; 6
 14e:	a1 df       	rcall	.-190    	; 0x92 <lcd_cmnd>
 150:	81 e2       	ldi	r24, 0x21	; 33
 152:	8a 95       	dec	r24
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_intit+0x54>
 156:	00 00       	nop
 158:	08 95       	ret

0000015a <lcd_goto>:
	 _delay_us(100);
 }
 void lcd_goto(unsigned char x , unsigned char y)
 {
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	00 d0       	rcall	.+0      	; 0x160 <lcd_goto+0x6>
 160:	00 d0       	rcall	.+0      	; 0x162 <lcd_goto+0x8>
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	 unsigned char address[] = {0x80,0xC0,0x94,0xD4};
 166:	90 e8       	ldi	r25, 0x80	; 128
 168:	99 83       	std	Y+1, r25	; 0x01
 16a:	90 ec       	ldi	r25, 0xC0	; 192
 16c:	9a 83       	std	Y+2, r25	; 0x02
 16e:	94 e9       	ldi	r25, 0x94	; 148
 170:	9b 83       	std	Y+3, r25	; 0x03
 172:	94 ed       	ldi	r25, 0xD4	; 212
 174:	9c 83       	std	Y+4, r25	; 0x04
	 lcd_cmnd(address[y-1] + x - 1);
 176:	fe 01       	movw	r30, r28
 178:	e6 0f       	add	r30, r22
 17a:	f1 1d       	adc	r31, r1
 17c:	81 50       	subi	r24, 0x01	; 1
 17e:	90 81       	ld	r25, Z
 180:	89 0f       	add	r24, r25
 182:	87 df       	rcall	.-242    	; 0x92 <lcd_cmnd>
 184:	81 e2       	ldi	r24, 0x21	; 33
 186:	8a 95       	dec	r24
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_goto+0x2c>
 18a:	00 00       	nop
	 _delay_us(100);

 }
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_prnt>:
 void lcd_prnt (char * str)
 {
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	fc 01       	movw	r30, r24
	 unsigned char i = 0 ;
	 while (str[i]!=0)
 1a2:	80 81       	ld	r24, Z
 1a4:	88 23       	and	r24, r24
 1a6:	51 f0       	breq	.+20     	; 0x1bc <lcd_prnt+0x22>
 1a8:	8f 01       	movw	r16, r30
 1aa:	c0 e0       	ldi	r28, 0x00	; 0
	 {
		 lcd_data(str[i]);
 1ac:	8d df       	rcall	.-230    	; 0xc8 <lcd_data>
		 i++;
 1ae:	cf 5f       	subi	r28, 0xFF	; 255

 }
 void lcd_prnt (char * str)
 {
	 unsigned char i = 0 ;
	 while (str[i]!=0)
 1b0:	f8 01       	movw	r30, r16
 1b2:	ec 0f       	add	r30, r28
 1b4:	f1 1d       	adc	r31, r1
 1b6:	80 81       	ld	r24, Z
 1b8:	81 11       	cpse	r24, r1
 1ba:	f8 cf       	rjmp	.-16     	; 0x1ac <lcd_prnt+0x12>
	 {
		 lcd_data(str[i]);
		 i++;
	 }
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	08 95       	ret

000001c4 <main>:
#include "LCD4.h"
#include "I2C.h"

int main(void)

{
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	60 97       	sbiw	r28, 0x10	; 16
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
	
	i2c_S_init(0x10);
 1d8:	80 e1       	ldi	r24, 0x10	; 16
 1da:	55 df       	rcall	.-342    	; 0x86 <i2c_S_init>
	lcd_intit();
 1dc:	90 df       	rcall	.-224    	; 0xfe <lcd_intit>
 1de:	89 ef       	ldi	r24, 0xF9	; 249
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <main+0x1e>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0x24>
 1e8:	00 00       	nop
 1ea:	7e 01       	movw	r14, r28
 1ec:	91 e1       	ldi	r25, 0x11	; 17
 1ee:	e9 0e       	add	r14, r25
 1f0:	f1 1c       	adc	r15, r1
	_delay_ms(1);
	
	char str [16];
	while (1)
	{
		i2c_listen();
 1f2:	45 df       	rcall	.-374    	; 0x7e <i2c_listen>
 1f4:	8e 01       	movw	r16, r28
 1f6:	0f 5f       	subi	r16, 0xFF	; 255
 1f8:	1f 4f       	sbci	r17, 0xFF	; 255
		unsigned char i = 0;
		
		while (i!=16)
		{
			str[i] = i2c_read(1);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	34 df       	rcall	.-408    	; 0x66 <i2c_read>
 1fe:	f8 01       	movw	r30, r16
 200:	81 93       	st	Z+, r24
 202:	8f 01       	movw	r16, r30
 204:	ee 15       	cp	r30, r14
	while (1)
	{
		i2c_listen();
		unsigned char i = 0;
		
		while (i!=16)
 206:	ff 05       	cpc	r31, r15
 208:	c1 f7       	brne	.-16     	; 0x1fa <main+0x36>
		{
			str[i] = i2c_read(1);
			i++;
		}
		lcd_goto(1,1);
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	a5 df       	rcall	.-182    	; 0x15a <lcd_goto>
		lcd_prnt(str);
 210:	ce 01       	movw	r24, r28
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	c2 df       	rcall	.-124    	; 0x19a <lcd_prnt>
 216:	ed cf       	rjmp	.-38     	; 0x1f2 <main+0x2e>

00000218 <_exit>:
		

	}
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
