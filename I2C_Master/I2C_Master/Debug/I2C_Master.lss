
I2C_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000112  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000815  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000695  00000000  00000000  00000a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000740  00000000  00000000  0000111e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001860  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006150  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b5  00000000  00000000  00007a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00007c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002017  00000000  00000000  00007c6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
   6:	00 00       	nop
   8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
   a:	00 00       	nop
   c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
   e:	00 00       	nop
  10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
  12:	00 00       	nop
  14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
  16:	00 00       	nop
  18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
  1e:	00 00       	nop
  20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
  22:	00 00       	nop
  24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>
  26:	00 00       	nop
  28:	28 c0       	rjmp	.+80     	; 0x7a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	26 c0       	rjmp	.+76     	; 0x7a <__bad_interrupt>
  2e:	00 00       	nop
  30:	24 c0       	rjmp	.+72     	; 0x7a <__bad_interrupt>
  32:	00 00       	nop
  34:	22 c0       	rjmp	.+68     	; 0x7a <__bad_interrupt>
  36:	00 00       	nop
  38:	20 c0       	rjmp	.+64     	; 0x7a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1e c0       	rjmp	.+60     	; 0x7a <__bad_interrupt>
  3e:	00 00       	nop
  40:	1c c0       	rjmp	.+56     	; 0x7a <__bad_interrupt>
  42:	00 00       	nop
  44:	1a c0       	rjmp	.+52     	; 0x7a <__bad_interrupt>
  46:	00 00       	nop
  48:	18 c0       	rjmp	.+48     	; 0x7a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	16 c0       	rjmp	.+44     	; 0x7a <__bad_interrupt>
  4e:	00 00       	nop
  50:	14 c0       	rjmp	.+40     	; 0x7a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	18 d0       	rcall	.+48     	; 0xa8 <main>
  78:	4a c0       	rjmp	.+148    	; 0x10e <_exit>

0000007a <__bad_interrupt>:
  7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <i2c_send>:
#include "I2C.h"

void i2c_send (uint8_t data)
{
	TWDR = data;
  7c:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
  7e:	84 e8       	ldi	r24, 0x84	; 132
  80:	86 bf       	out	0x36, r24	; 54
	while (((TWCR) & (1<<TWINT)) == 0 );
  82:	06 b6       	in	r0, 0x36	; 54
  84:	07 fe       	sbrs	r0, 7
  86:	fd cf       	rjmp	.-6      	; 0x82 <i2c_send+0x6>
}
  88:	08 95       	ret

0000008a <i2c_strt>:
void i2c_strt ()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
  8a:	84 ea       	ldi	r24, 0xA4	; 164
  8c:	86 bf       	out	0x36, r24	; 54
	while (((TWCR) & (1<<TWINT)) == 0 );
  8e:	06 b6       	in	r0, 0x36	; 54
  90:	07 fe       	sbrs	r0, 7
  92:	fd cf       	rjmp	.-6      	; 0x8e <i2c_strt+0x4>

}
  94:	08 95       	ret

00000096 <i2c_stop>:
void i2c_stop ()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
  96:	84 ea       	ldi	r24, 0xA4	; 164
  98:	86 bf       	out	0x36, r24	; 54
  9a:	08 95       	ret

0000009c <i2c_M_init>:
}
void i2c_M_init ()
{
	TWSR = 0x00;  //set the scalar bits to 0
  9c:	11 b8       	out	0x01, r1	; 1
	TWBR = 0x47;
  9e:	87 e4       	ldi	r24, 0x47	; 71
  a0:	80 b9       	out	0x00, r24	; 0
	TWCR = 0x04; // enables the module via TWEN .
  a2:	84 e0       	ldi	r24, 0x04	; 4
  a4:	86 bf       	out	0x36, r24	; 54
  a6:	08 95       	ret

000000a8 <main>:




int main(void)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	60 97       	sbiw	r28, 0x10	; 16
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61
	i2c_M_init();
  bc:	ef df       	rcall	.-34     	; 0x9c <i2c_M_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	87 ea       	ldi	r24, 0xA7	; 167
  c0:	91 e6       	ldi	r25, 0x61	; 97
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x1a>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x20>
  c8:	00 00       	nop
	_delay_ms(100);
	
	
	unsigned char str [16] ={"I2C Initialized"};
  ca:	80 e1       	ldi	r24, 0x10	; 16
  cc:	e0 e6       	ldi	r30, 0x60	; 96
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	de 01       	movw	r26, r28
  d2:	11 96       	adiw	r26, 0x01	; 1
  d4:	01 90       	ld	r0, Z+
  d6:	0d 92       	st	X+, r0
  d8:	8a 95       	dec	r24
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x2c>
  dc:	7e 01       	movw	r14, r28
  de:	91 e1       	ldi	r25, 0x11	; 17
  e0:	e9 0e       	add	r14, r25
	while (1)
	{
		i2c_strt();
  e2:	f1 1c       	adc	r15, r1
		i2c_send(0x10);
  e4:	d2 df       	rcall	.-92     	; 0x8a <i2c_strt>
  e6:	80 e1       	ldi	r24, 0x10	; 16
  e8:	c9 df       	rcall	.-110    	; 0x7c <i2c_send>
  ea:	8e 01       	movw	r16, r28
  ec:	0f 5f       	subi	r16, 0xFF	; 255
  ee:	1f 4f       	sbci	r17, 0xFF	; 255
		unsigned char i;
		for ( i = 0 ; i<16 ; i++ )
		{
			
			i2c_send(str[i]);
  f0:	f8 01       	movw	r30, r16
  f2:	81 91       	ld	r24, Z+
  f4:	8f 01       	movw	r16, r30
  f6:	c2 df       	rcall	.-124    	; 0x7c <i2c_send>
  f8:	87 ea       	ldi	r24, 0xA7	; 167
  fa:	91 e6       	ldi	r25, 0x61	; 97
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x54>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x5a>
	while (1)
	{
		i2c_strt();
		i2c_send(0x10);
		unsigned char i;
		for ( i = 0 ; i<16 ; i++ )
 102:	00 00       	nop
 104:	0e 15       	cp	r16, r14
 106:	1f 05       	cpc	r17, r15
			i2c_send(str[i]);
			_delay_ms(100);
		}
		
		
		i2c_stop();
 108:	99 f7       	brne	.-26     	; 0xf0 <main+0x48>
 10a:	c5 df       	rcall	.-118    	; 0x96 <i2c_stop>
	}
 10c:	eb cf       	rjmp	.-42     	; 0xe4 <main+0x3c>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
